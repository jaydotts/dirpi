#include "../include/setup.h"
#include "../include/data.h"
#include "../include/trigger.h"
#include "../include/SRAM.h"
#include "../include/io.h"
#include "../include/setup.h"
#include "../include/testing.h"
#include <iostream>
#include <wiringPi.h>
#include <wiringPiI2C.h>
#include <ctime>
#include <stdlib.h>
#include <string> 
#include <iostream>
#include <fstream>

using namespace std; 

/* 
PowerOnSelfTest:
Run test of loaded params 
Run test of critical components 
Return OK signal if ok
*/

bool POST(){
    int test_mode = 1; 

    Testing test(test_mode); 

    if ( not test.is_alive() ){
         return false;}
    
    return (
        test.i2c_setup() &
        test.trig_setup() & 
        test.trig_precision() &
        test.clock_setting() 
        // & test.temp_sensor()
    ); 

}

int main(int argc, char* argv[]){

    if(POST()){

        std::string CONFIG_FILE_PATH = "config/config.ini";
        
        if(argv[2]){
            run_num = stoi(argv[2]);}
        if(argv[3]){
            max_files = stoi(argv[3]);}
        
        std::string output_fname;       // generated by code  

        initialize(CONFIG_FILE_PATH);

        // Initialize objects
        Data RunData(config->memory_depth);  
        Trigger Trg1 = Trigger(1); 
        Trigger Trg2 = Trigger(2); 
        SRAM RAM;

        
        int file_count = 0; 
        uint64_t tLive = 0;
        uint64_t tDead = 0;
        uint64_t t1{0}, t2{0};

/*
// Hack test of time delay for getTimeus
uint64_t tstart1{0};
sscanf(getTimeus().c_str(), "%llu", &tstart1);
t1 = 0;
for (int i=0; i<1000000; i++){
  sscanf(getTimeus().c_str(), "%llu", &t2);
  t1 += t2;
}
std::cout << "getTimeus test is "<< t2-tstart1 << " in 1M loops\n";
FILE *hack_output;
char hack_buffer[50];
sprintf(hack_buffer, "hack.txt");
hack_output = fopen(hack_buffer,"w");
fprintf(hack_output, "getTimeus test is %llu %llu %llu in 1M loops\n", t2, tstart1, t2-tstart1);
fclose(hack_output);
// End of hack test
*/

t2 = 0;

        sscanf(getTimeus().c_str(), "%llu", &t1);
        while(!isfile(".stop") & (file_count < 2+max_files)){ 

            if (RunData.eventNum % config->events_perFile == 0 & config->record_data){  
                // redefine file name after incrementing counter

                output_fname = 
                    fname_prefix + "_" + 
                    std::to_string(file_count)+
                    ".txt";

                std::string output_path = std::string(
                    output_folder+"/"+output_fname
                );

                file_count++;
                writeToFile(output_path.c_str(), RunData.PrintConfigs()); 
            };

            // enable SRAM sampling
            RAM.enable_sampling();
            sscanf(getTimeus().c_str(), "%llu", &t2);

            // use run configs to enable/disable triggers
            if(config->trg1){Trg1.enable();}
            if(config->trg2){Trg2.enable();}
            if(config->extrg){enable_extrg();}

            tDead = t2 - t1; 

            // wait for OE* to go high -> indicates that 
            // trigger runout has gone high 
            while(ReadPin(OEbar)==1); 
            sscanf(getTimeus().c_str(), "%llu", &t1);
            tLive=t1 -t2;
            digitalWrite(DAQHalt,1);
            digitalWrite(DAQHalt,1);
            digitalWrite(DAQHalt,1);
            RunData.Read(); 
            RunData.Write(
                (output_folder+"/"+output_fname).c_str(), tLive, tDead, t1); 
            RunData.eventNum++; 
        }

        std::cout<<"Total Events: "<<RunData.eventNum<<endl;
        free(config);
        std::ofstream stop(".stop"); 
        stop.close();
        return 1; 
    }
}
